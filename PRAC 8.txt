Aim: Working with Location Service


###create folder LocationService
dotnet new webapi -o LocationService

####Remove existing weatherforecast files both LocationService and controllers folder.

###Create a folder named Models in the TeamService folder.
###Create LocationRecord.cs in Models folder 

using System;
using System.Collections.Generic;

namespace LocationService.Models
{

    public class LocationRecord
    {
        public Guid ID { get; set; } = default!;
        public float Latitude { get; set; } = default!;
        public float Longitude { get; set; } = default!;
        public float Altitude { get; set; }= default!;
        public long Timestamp { get; set; }= default!;
        public Guid MemberID { get; set; } = default!;
    }

    public class LocationRecordComparer : Comparer<LocationRecord>
    {
        public override int Compare(LocationRecord x, LocationRecord y)
        {
            return x.Timestamp.CompareTo(y.Timestamp);
        }
    }

}


####Create a class file named “ILocationRecordRepository.cs” in the Models folder 
using System;
using System.Collections.Generic;

namespace LocationService.Models
{

    public interface ILocationRecordRepository
    {
        LocationRecord Add(LocationRecord locationRecord);
        LocationRecord Update(LocationRecord locationRecord);
        LocationRecord Get(Guid memberId, Guid recordId);
        LocationRecord Delete(Guid memberId, Guid recordId);

        LocationRecord GetLatestForMember(Guid memberId);

        ICollection<LocationRecord> AllForMember(Guid memberId);
    }
}



####Create a class file named “LocationRecordController.cs” in the Controllers folder
using System;
using Microsoft.AspNetCore.Mvc;
using LocationService.Models;

namespace LocationService.Controllers
{

    [Route("locations/{memberId}")]
    public class LocationRecordController : Controller
    {

        private ILocationRecordRepository locationRepository;

        public LocationRecordController(ILocationRecordRepository repository)
        {
            this.locationRepository = repository;
        }

        [HttpPost]
        public IActionResult AddLocation(Guid memberId, [FromBody] LocationRecord locationRecord)
        {
            locationRepository.Add(locationRecord);
            return this.Created($"/locations/{memberId}/{locationRecord.ID}", locationRecord);
        }

        [HttpGet]
        public IActionResult GetLocationsForMember(Guid memberId)
        {
            return this.Ok(locationRepository.AllForMember(memberId));
        }

        [HttpGet("latest")]
        public IActionResult GetLatestForMember(Guid memberId)
        {
            return this.Ok(locationRepository.GetLatestForMember(memberId));
        }
    }
}

####Create a folder named Persistence in the teamservice folder 
####Create “InMemoryLocationRecordRepository.cs” in the Persistence folder 

using System;
using System.Collections.Generic;
using LocationService.Models;
using System.Linq;

namespace LocationService.Persistence
{

    public class InMemoryLocationRecordRepository : ILocationRecordRepository
    {
        private static Dictionary<Guid, SortedList<long, LocationRecord>> locationRecords;

        public InMemoryLocationRecordRepository()
        {
            if (locationRecords == null)
            {
                locationRecords = new Dictionary<Guid, SortedList<long, LocationRecord>>();
            }
        }

        public LocationRecord Add(LocationRecord locationRecord)
        {
            var memberRecords = getMemberRecords(locationRecord.MemberID);

            memberRecords.Add(locationRecord.Timestamp, locationRecord);
            return locationRecord;
        }

        public ICollection<LocationRecord> AllForMember(Guid memberId)
        {
            var memberRecords = getMemberRecords(memberId);
            return memberRecords.Values.Where(l => l.MemberID == memberId).ToList();
        }

        public LocationRecord Delete(Guid memberId, Guid recordId)
        {
            var memberRecords = getMemberRecords(memberId);
            LocationRecord lr = memberRecords.Values.Where(l => l.ID == recordId).FirstOrDefault();

            if (lr != null)
            {
                memberRecords.Remove(lr.Timestamp);
            }

            return lr;
        }

        public LocationRecord Get(Guid memberId, Guid recordId)
        {
            var memberRecords = getMemberRecords(memberId);

            LocationRecord lr = memberRecords.Values.Where(l => l.ID == recordId).FirstOrDefault();
            return lr;
        }

        public LocationRecord Update(LocationRecord locationRecord)
        {
            return Delete(locationRecord.MemberID, locationRecord.ID);
        }

        public LocationRecord GetLatestForMember(Guid memberId)
        {
            var memberRecords = getMemberRecords(memberId);

            LocationRecord lr = memberRecords.Values.LastOrDefault();
            return lr;
        }

        private SortedList<long, LocationRecord> getMemberRecords(Guid memberId)
        {
            if (!locationRecords.ContainsKey(memberId))
            {
                locationRecords.Add(memberId, new SortedList<long, LocationRecord>());
            }

            var list = locationRecords[memberId];
            return list;
        }
    }
}


Create a class file named “Startup.cs” in the TeamService folder 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.OpenApi.Models;
using LocationService.Persistence;
using LocationService.Models;

namespace LocationService
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {

            services.AddControllers();
            services.AddScoped<ILocationRecordRepository, InMemoryLocationRecordRepository>();
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "LocationService", Version = "v1" });
            });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "LocationService v1"));
            }

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}




####Replace the code in ‘TeamService.csproj’ 
<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>net7.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="7.0.8" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.5.0" />
  </ItemGroup>
</Project>



####Replace the code in ‘Program.cs’ file 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace LocationService
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });
    }
}



####OUTPUT:



####Command Prompt 1: 
Go to LocationService Project and run the project: 
dotnet run –server.urls http://*:5001
 

####Command Prompt 2:
Go to TeamService Project and run the project: 
dotnet run
 


####command prompt 3: 

curl -H "Content-Type:application/json" -X POST -d "{\"id\":\"e52baa63-d511-417e-9e54-7aab04286281\", \"name\":\"UDIT\"}" http://localhost:5174/teams
 


curl -H "Content-Type:application/json" -X POST -d "{\"id\":\"63e7acf8-8fae-42ce-9349-3c8593ac8292\", \"firstName\":\"Shraddha\", \"lastName\":\"Kadam\"}" http://localhost:5174/teams/e52baa63-d511-417e-9e54-7aab04286281/members
 


curl -H "Content-Type:application/json" -X POST -d "{\"id\":\"64c3e69f-1580-4b2f-a9ff-2c5f3b8f0e1f\", \"latitude\":12.0,\"longitude\":12.0,\"altitude\":10.0, \"timestamp\":0,\"memberId\":\"63e7acf8-8fae-42ce-9349-3c8593ac8292\"}" http://localhost:5186/locations/63e7acf8-8fae-42ce-9349-3c8593ac8292
 
